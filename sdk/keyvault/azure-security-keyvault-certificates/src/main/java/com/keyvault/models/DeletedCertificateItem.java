// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.keyvault.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Map;

/**
 * The deleted certificate item containing metadata about the deleted certificate.
 */
@Immutable
public final class DeletedCertificateItem implements JsonSerializable<DeletedCertificateItem> {
    /*
     * Certificate identifier.
     */
    @Generated
    private String id;

    /*
     * The certificate management attributes.
     */
    @Generated
    private CertificateAttributes attributes;

    /*
     * Application specific metadata in the form of key-value pairs.
     */
    @Generated
    private Map<String, String> tags;

    /*
     * Thumbprint of the certificate.
     */
    @Generated
    private byte[] x509Thumbprint;

    /*
     * The url of the recovery object, used to identify and recover the deleted
     * certificate.
     */
    @Generated
    private final String recoveryId;

    /*
     * The time when the certificate is scheduled to be purged, in UTC
     */
    @Generated
    private Long scheduledPurgeDate;

    /*
     * The time when the certificate was deleted, in UTC
     */
    @Generated
    private Long deletedDate;

    /**
     * Creates an instance of DeletedCertificateItem class.
     * 
     * @param recoveryId the recoveryId value to set.
     */
    @Generated
    private DeletedCertificateItem(String recoveryId) {
        this.recoveryId = recoveryId;
    }

    /**
     * Get the id property: Certificate identifier.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the attributes property: The certificate management attributes.
     * 
     * @return the attributes value.
     */
    @Generated
    public CertificateAttributes getAttributes() {
        return this.attributes;
    }

    /**
     * Get the tags property: Application specific metadata in the form of key-value pairs.
     * 
     * @return the tags value.
     */
    @Generated
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Get the x509Thumbprint property: Thumbprint of the certificate.
     * 
     * @return the x509Thumbprint value.
     */
    @Generated
    public byte[] getX509Thumbprint() {
        return CoreUtils.clone(this.x509Thumbprint);
    }

    /**
     * Get the recoveryId property: The url of the recovery object, used to identify and recover the deleted
     * certificate.
     * 
     * @return the recoveryId value.
     */
    @Generated
    public String getRecoveryId() {
        return this.recoveryId;
    }

    /**
     * Get the scheduledPurgeDate property: The time when the certificate is scheduled to be purged, in UTC.
     * 
     * @return the scheduledPurgeDate value.
     */
    @Generated
    public OffsetDateTime getScheduledPurgeDate() {
        if (this.scheduledPurgeDate == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.scheduledPurgeDate), ZoneOffset.UTC);
    }

    /**
     * Get the deletedDate property: The time when the certificate was deleted, in UTC.
     * 
     * @return the deletedDate value.
     */
    @Generated
    public OffsetDateTime getDeletedDate() {
        if (this.deletedDate == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.deletedDate), ZoneOffset.UTC);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recoveryId", this.recoveryId);
        jsonWriter.writeJsonField("attributes", this.attributes);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBinaryField("x5t", this.x509Thumbprint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeletedCertificateItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeletedCertificateItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeletedCertificateItem.
     */
    @Generated
    public static DeletedCertificateItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String recoveryId = null;
            CertificateAttributes attributes = null;
            Map<String, String> tags = null;
            byte[] x509Thumbprint = null;
            Long scheduledPurgeDate = null;
            Long deletedDate = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("recoveryId".equals(fieldName)) {
                    recoveryId = reader.getString();
                } else if ("attributes".equals(fieldName)) {
                    attributes = CertificateAttributes.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("x5t".equals(fieldName)) {
                    x509Thumbprint = reader.getBinary();
                } else if ("scheduledPurgeDate".equals(fieldName)) {
                    scheduledPurgeDate = reader.getNullable(JsonReader::getLong);
                } else if ("deletedDate".equals(fieldName)) {
                    deletedDate = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }
            DeletedCertificateItem deserializedDeletedCertificateItem = new DeletedCertificateItem(recoveryId);
            deserializedDeletedCertificateItem.id = id;
            deserializedDeletedCertificateItem.attributes = attributes;
            deserializedDeletedCertificateItem.tags = tags;
            deserializedDeletedCertificateItem.x509Thumbprint = x509Thumbprint;
            deserializedDeletedCertificateItem.scheduledPurgeDate = scheduledPurgeDate;
            deserializedDeletedCertificateItem.deletedDate = deletedDate;

            return deserializedDeletedCertificateItem;
        });
    }
}
