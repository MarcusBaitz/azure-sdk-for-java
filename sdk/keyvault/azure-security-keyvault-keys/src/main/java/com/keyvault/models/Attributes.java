// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.keyvault.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The object attributes managed by the KeyVault service.
 */
@Fluent
public class Attributes implements JsonSerializable<Attributes> {
    /*
     * Determines whether the object is enabled.
     */
    @Generated
    private Boolean enabled;

    /*
     * Not before date in UTC.
     */
    @Generated
    private String notBefore;

    /*
     * Expiry date in UTC.
     */
    @Generated
    private String expires;

    /*
     * Creation time in UTC.
     */
    @Generated
    private String created;

    /*
     * Last updated time in UTC.
     */
    @Generated
    private String updated;

    /**
     * Creates an instance of Attributes class.
     */
    @Generated
    public Attributes() {
    }

    /**
     * Get the enabled property: Determines whether the object is enabled.
     * 
     * @return the enabled value.
     */
    @Generated
    public Boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Determines whether the object is enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the Attributes object itself.
     */
    @Generated
    public Attributes setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the notBefore property: Not before date in UTC.
     * 
     * @return the notBefore value.
     */
    @Generated
    public String getNotBefore() {
        return this.notBefore;
    }

    /**
     * Set the notBefore property: Not before date in UTC.
     * 
     * @param notBefore the notBefore value to set.
     * @return the Attributes object itself.
     */
    @Generated
    public Attributes setNotBefore(String notBefore) {
        this.notBefore = notBefore;
        return this;
    }

    /**
     * Get the expires property: Expiry date in UTC.
     * 
     * @return the expires value.
     */
    @Generated
    public String getExpires() {
        return this.expires;
    }

    /**
     * Set the expires property: Expiry date in UTC.
     * 
     * @param expires the expires value to set.
     * @return the Attributes object itself.
     */
    @Generated
    public Attributes setExpires(String expires) {
        this.expires = expires;
        return this;
    }

    /**
     * Get the created property: Creation time in UTC.
     * 
     * @return the created value.
     */
    @Generated
    public String getCreated() {
        return this.created;
    }

    /**
     * Set the created property: Creation time in UTC.
     * 
     * @param created the created value to set.
     * @return the Attributes object itself.
     */
    @Generated
    Attributes setCreated(String created) {
        this.created = created;
        return this;
    }

    /**
     * Get the updated property: Last updated time in UTC.
     * 
     * @return the updated value.
     */
    @Generated
    public String getUpdated() {
        return this.updated;
    }

    /**
     * Set the updated property: Last updated time in UTC.
     * 
     * @param updated the updated value to set.
     * @return the Attributes object itself.
     */
    @Generated
    Attributes setUpdated(String updated) {
        this.updated = updated;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("nbf", this.notBefore);
        jsonWriter.writeStringField("exp", this.expires);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Attributes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Attributes if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Attributes.
     */
    @Generated
    public static Attributes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Attributes deserializedAttributes = new Attributes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedAttributes.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("nbf".equals(fieldName)) {
                    deserializedAttributes.notBefore = reader.getString();
                } else if ("exp".equals(fieldName)) {
                    deserializedAttributes.expires = reader.getString();
                } else if ("created".equals(fieldName)) {
                    deserializedAttributes.created = reader.getString();
                } else if ("updated".equals(fieldName)) {
                    deserializedAttributes.updated = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAttributes;
        });
    }
}
