// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.keyvault.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The attributes of a key managed by the key vault service.
 */
@Fluent
public final class KeyAttributes extends Attributes {
    /*
     * softDelete data retention days. Value should be >=7 and <=90 when softDelete
     * enabled, otherwise 0.
     */
    @Generated
    private Integer recoverableDays;

    /*
     * Reflects the deletion recovery level currently in effect for keys in the
     * current vault. If it contains 'Purgeable' the key can be permanently deleted by
     * a privileged user; otherwise, only the system can purge the key, at the end of
     * the retention interval.
     */
    @Generated
    private DeletionRecoveryLevel recoveryLevel;

    /*
     * Indicates if the private key can be exported. Release policy must be provided
     * when creating the first version of an exportable key.
     */
    @Generated
    private Boolean exportable;

    /*
     * The underlying HSM Platform.
     */
    @Generated
    private String hsmPlatform;

    /*
     * Last updated time in UTC.
     */
    @Generated
    private String updated;

    /*
     * Creation time in UTC.
     */
    @Generated
    private String created;

    /**
     * Creates an instance of KeyAttributes class.
     */
    @Generated
    public KeyAttributes() {
    }

    /**
     * Get the recoverableDays property: softDelete data retention days. Value should be &gt;=7 and &lt;=90 when
     * softDelete
     * enabled, otherwise 0.
     * 
     * @return the recoverableDays value.
     */
    @Generated
    public Integer getRecoverableDays() {
        return this.recoverableDays;
    }

    /**
     * Get the recoveryLevel property: Reflects the deletion recovery level currently in effect for keys in the
     * current vault. If it contains 'Purgeable' the key can be permanently deleted by
     * a privileged user; otherwise, only the system can purge the key, at the end of
     * the retention interval.
     * 
     * @return the recoveryLevel value.
     */
    @Generated
    public DeletionRecoveryLevel getRecoveryLevel() {
        return this.recoveryLevel;
    }

    /**
     * Get the exportable property: Indicates if the private key can be exported. Release policy must be provided
     * when creating the first version of an exportable key.
     * 
     * @return the exportable value.
     */
    @Generated
    public Boolean isExportable() {
        return this.exportable;
    }

    /**
     * Set the exportable property: Indicates if the private key can be exported. Release policy must be provided
     * when creating the first version of an exportable key.
     * 
     * @param exportable the exportable value to set.
     * @return the KeyAttributes object itself.
     */
    @Generated
    public KeyAttributes setExportable(Boolean exportable) {
        this.exportable = exportable;
        return this;
    }

    /**
     * Get the hsmPlatform property: The underlying HSM Platform.
     * 
     * @return the hsmPlatform value.
     */
    @Generated
    public String getHsmPlatform() {
        return this.hsmPlatform;
    }

    /**
     * Get the updated property: Last updated time in UTC.
     * 
     * @return the updated value.
     */
    @Generated
    @Override
    public String getUpdated() {
        return this.updated;
    }

    /**
     * Get the created property: Creation time in UTC.
     * 
     * @return the created value.
     */
    @Generated
    @Override
    public String getCreated() {
        return this.created;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KeyAttributes setEnabled(Boolean enabled) {
        super.setEnabled(enabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KeyAttributes setNotBefore(String notBefore) {
        super.setNotBefore(notBefore);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KeyAttributes setExpires(String expires) {
        super.setExpires(expires);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", isEnabled());
        jsonWriter.writeStringField("nbf", getNotBefore());
        jsonWriter.writeStringField("exp", getExpires());
        jsonWriter.writeBooleanField("exportable", this.exportable);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyAttributes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyAttributes if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the KeyAttributes.
     */
    @Generated
    public static KeyAttributes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeyAttributes deserializedKeyAttributes = new KeyAttributes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedKeyAttributes.setEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("nbf".equals(fieldName)) {
                    deserializedKeyAttributes.setNotBefore(reader.getString());
                } else if ("exp".equals(fieldName)) {
                    deserializedKeyAttributes.setExpires(reader.getString());
                } else if ("created".equals(fieldName)) {
                    deserializedKeyAttributes.created = reader.getString();
                } else if ("updated".equals(fieldName)) {
                    deserializedKeyAttributes.updated = reader.getString();
                } else if ("recoverableDays".equals(fieldName)) {
                    deserializedKeyAttributes.recoverableDays = reader.getNullable(JsonReader::getInt);
                } else if ("recoveryLevel".equals(fieldName)) {
                    deserializedKeyAttributes.recoveryLevel = DeletionRecoveryLevel.fromString(reader.getString());
                } else if ("exportable".equals(fieldName)) {
                    deserializedKeyAttributes.exportable = reader.getNullable(JsonReader::getBoolean);
                } else if ("hsmPlatform".equals(fieldName)) {
                    deserializedKeyAttributes.hsmPlatform = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKeyAttributes;
        });
    }
}
