// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.keyvault.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18.
 */
@Fluent
public final class JsonWebKey implements JsonSerializable<JsonWebKey> {
    /*
     * Key identifier.
     */
    @Generated
    private String kid;

    /*
     * JsonWebKey Key Type (kty), as defined in
     * https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
     */
    @Generated
    private JsonWebKeyType kty;

    /*
     * The key_ops property.
     */
    @Generated
    private List<String> keyOps;

    /*
     * RSA modulus.
     */
    @Generated
    private byte[] n;

    /*
     * RSA public exponent.
     */
    @Generated
    private byte[] e;

    /*
     * RSA private exponent, or the D component of an EC private key.
     */
    @Generated
    private byte[] d;

    /*
     * RSA private key parameter.
     */
    @Generated
    private byte[] dp;

    /*
     * RSA private key parameter.
     */
    @Generated
    private byte[] dq;

    /*
     * RSA private key parameter.
     */
    @Generated
    private byte[] qi;

    /*
     * RSA secret prime.
     */
    @Generated
    private byte[] p;

    /*
     * RSA secret prime, with p < q.
     */
    @Generated
    private byte[] q;

    /*
     * Symmetric key.
     */
    @Generated
    private byte[] k;

    /*
     * Protected Key, used with 'Bring Your Own Key'.
     */
    @Generated
    private byte[] t;

    /*
     * Elliptic curve name. For valid values, see JsonWebKeyCurveName.
     */
    @Generated
    private JsonWebKeyCurveName crv;

    /*
     * X component of an EC public key.
     */
    @Generated
    private byte[] x;

    /*
     * Y component of an EC public key.
     */
    @Generated
    private byte[] y;

    /**
     * Creates an instance of JsonWebKey class.
     */
    @Generated
    public JsonWebKey() {
    }

    /**
     * Get the kid property: Key identifier.
     * 
     * @return the kid value.
     */
    @Generated
    public String getKid() {
        return this.kid;
    }

    /**
     * Set the kid property: Key identifier.
     * 
     * @param kid the kid value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setKid(String kid) {
        this.kid = kid;
        return this;
    }

    /**
     * Get the kty property: JsonWebKey Key Type (kty), as defined in
     * https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
     * 
     * @return the kty value.
     */
    @Generated
    public JsonWebKeyType getKty() {
        return this.kty;
    }

    /**
     * Set the kty property: JsonWebKey Key Type (kty), as defined in
     * https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
     * 
     * @param kty the kty value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setKty(JsonWebKeyType kty) {
        this.kty = kty;
        return this;
    }

    /**
     * Get the keyOps property: The key_ops property.
     * 
     * @return the keyOps value.
     */
    @Generated
    public List<String> getKeyOps() {
        return this.keyOps;
    }

    /**
     * Set the keyOps property: The key_ops property.
     * 
     * @param keyOps the keyOps value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setKeyOps(List<String> keyOps) {
        this.keyOps = keyOps;
        return this;
    }

    /**
     * Get the n property: RSA modulus.
     * 
     * @return the n value.
     */
    @Generated
    public byte[] getN() {
        return CoreUtils.clone(this.n);
    }

    /**
     * Set the n property: RSA modulus.
     * 
     * @param n the n value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setN(byte[] n) {
        this.n = CoreUtils.clone(n);
        return this;
    }

    /**
     * Get the e property: RSA public exponent.
     * 
     * @return the e value.
     */
    @Generated
    public byte[] getE() {
        return CoreUtils.clone(this.e);
    }

    /**
     * Set the e property: RSA public exponent.
     * 
     * @param e the e value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setE(byte[] e) {
        this.e = CoreUtils.clone(e);
        return this;
    }

    /**
     * Get the d property: RSA private exponent, or the D component of an EC private key.
     * 
     * @return the d value.
     */
    @Generated
    public byte[] getD() {
        return CoreUtils.clone(this.d);
    }

    /**
     * Set the d property: RSA private exponent, or the D component of an EC private key.
     * 
     * @param d the d value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setD(byte[] d) {
        this.d = CoreUtils.clone(d);
        return this;
    }

    /**
     * Get the dp property: RSA private key parameter.
     * 
     * @return the dp value.
     */
    @Generated
    public byte[] getDp() {
        return CoreUtils.clone(this.dp);
    }

    /**
     * Set the dp property: RSA private key parameter.
     * 
     * @param dp the dp value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setDp(byte[] dp) {
        this.dp = CoreUtils.clone(dp);
        return this;
    }

    /**
     * Get the dq property: RSA private key parameter.
     * 
     * @return the dq value.
     */
    @Generated
    public byte[] getDq() {
        return CoreUtils.clone(this.dq);
    }

    /**
     * Set the dq property: RSA private key parameter.
     * 
     * @param dq the dq value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setDq(byte[] dq) {
        this.dq = CoreUtils.clone(dq);
        return this;
    }

    /**
     * Get the qi property: RSA private key parameter.
     * 
     * @return the qi value.
     */
    @Generated
    public byte[] getQi() {
        return CoreUtils.clone(this.qi);
    }

    /**
     * Set the qi property: RSA private key parameter.
     * 
     * @param qi the qi value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setQi(byte[] qi) {
        this.qi = CoreUtils.clone(qi);
        return this;
    }

    /**
     * Get the p property: RSA secret prime.
     * 
     * @return the p value.
     */
    @Generated
    public byte[] getP() {
        return CoreUtils.clone(this.p);
    }

    /**
     * Set the p property: RSA secret prime.
     * 
     * @param p the p value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setP(byte[] p) {
        this.p = CoreUtils.clone(p);
        return this;
    }

    /**
     * Get the q property: RSA secret prime, with p &lt; q.
     * 
     * @return the q value.
     */
    @Generated
    public byte[] getQ() {
        return CoreUtils.clone(this.q);
    }

    /**
     * Set the q property: RSA secret prime, with p &lt; q.
     * 
     * @param q the q value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setQ(byte[] q) {
        this.q = CoreUtils.clone(q);
        return this;
    }

    /**
     * Get the k property: Symmetric key.
     * 
     * @return the k value.
     */
    @Generated
    public byte[] getK() {
        return CoreUtils.clone(this.k);
    }

    /**
     * Set the k property: Symmetric key.
     * 
     * @param k the k value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setK(byte[] k) {
        this.k = CoreUtils.clone(k);
        return this;
    }

    /**
     * Get the t property: Protected Key, used with 'Bring Your Own Key'.
     * 
     * @return the t value.
     */
    @Generated
    public byte[] getT() {
        return CoreUtils.clone(this.t);
    }

    /**
     * Set the t property: Protected Key, used with 'Bring Your Own Key'.
     * 
     * @param t the t value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setT(byte[] t) {
        this.t = CoreUtils.clone(t);
        return this;
    }

    /**
     * Get the crv property: Elliptic curve name. For valid values, see JsonWebKeyCurveName.
     * 
     * @return the crv value.
     */
    @Generated
    public JsonWebKeyCurveName getCrv() {
        return this.crv;
    }

    /**
     * Set the crv property: Elliptic curve name. For valid values, see JsonWebKeyCurveName.
     * 
     * @param crv the crv value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setCrv(JsonWebKeyCurveName crv) {
        this.crv = crv;
        return this;
    }

    /**
     * Get the x property: X component of an EC public key.
     * 
     * @return the x value.
     */
    @Generated
    public byte[] getX() {
        return CoreUtils.clone(this.x);
    }

    /**
     * Set the x property: X component of an EC public key.
     * 
     * @param x the x value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setX(byte[] x) {
        this.x = CoreUtils.clone(x);
        return this;
    }

    /**
     * Get the y property: Y component of an EC public key.
     * 
     * @return the y value.
     */
    @Generated
    public byte[] getY() {
        return CoreUtils.clone(this.y);
    }

    /**
     * Set the y property: Y component of an EC public key.
     * 
     * @param y the y value to set.
     * @return the JsonWebKey object itself.
     */
    @Generated
    public JsonWebKey setY(byte[] y) {
        this.y = CoreUtils.clone(y);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kid", this.kid);
        jsonWriter.writeStringField("kty", this.kty == null ? null : this.kty.toString());
        jsonWriter.writeArrayField("key_ops", this.keyOps, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBinaryField("n", this.n);
        jsonWriter.writeBinaryField("e", this.e);
        jsonWriter.writeBinaryField("d", this.d);
        jsonWriter.writeBinaryField("dp", this.dp);
        jsonWriter.writeBinaryField("dq", this.dq);
        jsonWriter.writeBinaryField("qi", this.qi);
        jsonWriter.writeBinaryField("p", this.p);
        jsonWriter.writeBinaryField("q", this.q);
        jsonWriter.writeBinaryField("k", this.k);
        jsonWriter.writeBinaryField("key_hsm", this.t);
        jsonWriter.writeStringField("crv", this.crv == null ? null : this.crv.toString());
        jsonWriter.writeBinaryField("x", this.x);
        jsonWriter.writeBinaryField("y", this.y);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonWebKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonWebKey if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the JsonWebKey.
     */
    @Generated
    public static JsonWebKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonWebKey deserializedJsonWebKey = new JsonWebKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kid".equals(fieldName)) {
                    deserializedJsonWebKey.kid = reader.getString();
                } else if ("kty".equals(fieldName)) {
                    deserializedJsonWebKey.kty = JsonWebKeyType.fromString(reader.getString());
                } else if ("key_ops".equals(fieldName)) {
                    List<String> keyOps = reader.readArray(reader1 -> reader1.getString());
                    deserializedJsonWebKey.keyOps = keyOps;
                } else if ("n".equals(fieldName)) {
                    deserializedJsonWebKey.n = reader.getBinary();
                } else if ("e".equals(fieldName)) {
                    deserializedJsonWebKey.e = reader.getBinary();
                } else if ("d".equals(fieldName)) {
                    deserializedJsonWebKey.d = reader.getBinary();
                } else if ("dp".equals(fieldName)) {
                    deserializedJsonWebKey.dp = reader.getBinary();
                } else if ("dq".equals(fieldName)) {
                    deserializedJsonWebKey.dq = reader.getBinary();
                } else if ("qi".equals(fieldName)) {
                    deserializedJsonWebKey.qi = reader.getBinary();
                } else if ("p".equals(fieldName)) {
                    deserializedJsonWebKey.p = reader.getBinary();
                } else if ("q".equals(fieldName)) {
                    deserializedJsonWebKey.q = reader.getBinary();
                } else if ("k".equals(fieldName)) {
                    deserializedJsonWebKey.k = reader.getBinary();
                } else if ("key_hsm".equals(fieldName)) {
                    deserializedJsonWebKey.t = reader.getBinary();
                } else if ("crv".equals(fieldName)) {
                    deserializedJsonWebKey.crv = JsonWebKeyCurveName.fromString(reader.getString());
                } else if ("x".equals(fieldName)) {
                    deserializedJsonWebKey.x = reader.getBinary();
                } else if ("y".equals(fieldName)) {
                    deserializedJsonWebKey.y = reader.getBinary();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJsonWebKey;
        });
    }
}
